#ifndef STAN_MATH_OPENCL_KERNEL_GENERATOR_OPERATION_HPP
#define STAN_MATH_OPENCL_KERNEL_GENERATOR_OPERATION_HPP
#ifdef STAN_OPENCL

#include <stan/math/opencl/kernel_generator/type_str.hpp>
#include <stan/math/opencl/kernel_generator/name_generator.hpp>
#include <stan/math/opencl/kernel_generator/is_valid_expression.hpp>
#include <stan/math/opencl/matrix_cl_view.hpp>
#include <stan/math/opencl/matrix_cl.hpp>
#include <stan/math/opencl/kernel_cl.hpp>
#include <cl.hpp>
#include <string>
#include <set>

namespace stan {
namespace math {

/**
 * Parts of an OpenCL kernel, generated by an expression
 */
struct kernel_parts {
  std::string body; // the body of the kernel - code executing operations
  std::string args; // kernel arguments
};

/**
 * Base for all kernel generator operations.
 * @tparam Derived derived type
 * @tparam ReturnScalar scalar type of the result
 */
template <typename Derived, typename ReturnScalar>
class operation : public operation_base {
 public:
  static const int dynamic = -1; //value representing a not yet determined size

  /**
   * Evaluates the expression.
   * @return Result of the expression.
   */
  matrix_cl<ReturnScalar> eval() const {
    matrix_cl<ReturnScalar> res(derived().rows(), derived().cols(),
                                derived().view());
    this->evaluate_into(res);
    return res;
  }

  /**
   * Converting to \c matrix_cl evaluates the expression. Used when assigning to
   * a \c matrix_cl.
   */
  operator matrix_cl<ReturnScalar>() const { return derived().eval(); }

  /**
   * Evaluates \c this expression into given left-hand-side expression.
   * If the kernel for this expression is not cached it is generated and then executed.
   * @tparam T_lhs type of the left-hand-side expression
   * @param lhs Left-hand-side expression
   */
  template <typename T_lhs>
  inline void evaluate_into(const T_lhs& lhs) const;

  /**
   * Generates kernel source for evaluating \c this expression into given left-hand-side expression.
   * @tparam T_lhs type of the left-hand-side expression
   * @param lhs Left-hand-side expression
   * @return kernel source
   */
  template <typename T_lhs>
  inline std::string get_kernel_source_for_evaluating_into(
      const T_lhs& lhs) const;

  template <typename T_lhs>
  struct cache {
    static cl::Kernel kernel; //cached kernel - different for every combination of template instantination of \c operation and every \c T_lhs
  };

 protected:
  mutable std::string var_name; //name of the variable that holds result of this operation in the kernel

  /**
   * Casts the instance into its derived type.
   * @return \c this cast into derived type
   */
  inline Derived& derived() { return *static_cast<Derived*>(this); }

  /**
   * Casts the instance into its derived type.
   * @return \c this cast into derived type
   */
  inline const Derived& derived() const {
    return *static_cast<const Derived*>(this);
  }
};

template <typename Derived, typename ReturnScalar>
template <typename T_lhs>
cl::Kernel operation<Derived, ReturnScalar>::cache<T_lhs>::kernel;

}  // namespace math
}  // namespace stan

#endif
#endif
