
// Code generated by stanc f22db2d
#include <stan/model/model_header.hpp>
namespace vdp_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 27, column 2 to column 20)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 28, column 2 to column 22)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 32, column 2 to column 17)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 33, column 2 to column 18)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 34, column 2 to column 24)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 38, column 4 to column 79)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 37, column 9 to line 39, column 3)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 36, column 4 to column 81)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 35, column 20 to line 37, column 3)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 35, column 2 to line 39, column 3)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 40, column 2 to column 17)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 44, column 2 to column 33)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 45, column 2 to column 25)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 46, column 2 to column 28)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 13, column 2 to column 15)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 14, column 2 to column 19)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 15, column 9 to column 12)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 15, column 2 to column 14)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 16, column 10 to column 13)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 16, column 2 to column 15)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 20, column 2 to column 14)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 21, column 2 to column 30)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 22, column 2 to column 14)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 23, column 2 to column 13)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 32, column 9 to column 12)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 33, column 13 to column 16)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 34, column 13 to column 14)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 5, column 4 to column 17)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 6, column 4 to column 20)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 7, column 4 to column 60)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 8, column 4 to column 16)",
                                                      " (in 'stan/lib/stan_math/rk45_benchmark/van_der_pol/vdp.stan', line 4, column 68 to line 9, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
vdp(const T0__& t, const std::vector<T1__>& y,
    const std::vector<T2__>& theta, const std::vector<T3__>& x_r,
    const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<local_scalar_t__> dydt;
    dydt = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
    
    current_statement__ = 29;
    assign(dydt, cons_list(index_uni(1), nil_index_list()), -y[(2 - 1)],
      "assigning variable dydt");
    current_statement__ = 30;
    assign(dydt, cons_list(index_uni(2), nil_index_list()),
      ((-y[(1 - 1)] + (y[(2 - 1)] * (1 - (y[(1 - 1)] * y[(1 - 1)])))) /
        theta[(1 - 1)]), "assigning variable dydt");
    current_statement__ = 31;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct vdp_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& t, const std::vector<T1__>& y,
           const std::vector<T2__>& theta, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return vdp(t, y, theta, x_r, x_i, pstream__);
}
};

class vdp_model final : public model_base_crtp<vdp_model> {

 private:
  int use_ckrk;
  int N_t;
  std::vector<double> t;
  std::vector<double> y1;
  double t0;
  std::vector<double> y0;
  std::vector<double> x_r;
  std::vector<int> x_i;
 
 public:
  ~vdp_model() { }
  
  inline std::string model_name() const final { return "vdp_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 f22db2d", "stancflags = "};
  }
  
  
  vdp_model(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "vdp_model_namespace::vdp_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 15;
      context__.validate_dims("data initialization","use_ckrk","int",
          context__.to_vec());
      use_ckrk = std::numeric_limits<int>::min();
      
      current_statement__ = 15;
      use_ckrk = context__.vals_i("use_ckrk")[(1 - 1)];
      current_statement__ = 16;
      context__.validate_dims("data initialization","N_t","int",
          context__.to_vec());
      N_t = std::numeric_limits<int>::min();
      
      current_statement__ = 16;
      N_t = context__.vals_i("N_t")[(1 - 1)];
      current_statement__ = 16;
      current_statement__ = 16;
      check_greater_or_equal(function__, "N_t", N_t, 0);
      current_statement__ = 17;
      validate_non_negative_index("t", "N_t", N_t);
      current_statement__ = 18;
      context__.validate_dims("data initialization","t","double",
          context__.to_vec(N_t));
      t = std::vector<double>(N_t, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 18;
      assign(t, nil_index_list(), context__.vals_r("t"),
        "assigning variable t");
      current_statement__ = 19;
      validate_non_negative_index("y1", "N_t", N_t);
      current_statement__ = 20;
      context__.validate_dims("data initialization","y1","double",
          context__.to_vec(N_t));
      y1 = std::vector<double>(N_t, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 20;
      assign(y1, nil_index_list(), context__.vals_r("y1"),
        "assigning variable y1");
      current_statement__ = 21;
      t0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      t0 = 0;
      current_statement__ = 22;
      y0 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 22;
      assign(y0, nil_index_list(), std::vector<double>{2.0, (2.0 / 3.0)},
        "assigning variable y0");
      current_statement__ = 23;
      x_r = std::vector<double>(0, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 24;
      x_i = std::vector<int>(0, std::numeric_limits<int>::min());
      
      current_statement__ = 25;
      validate_non_negative_index("y", "N_t", N_t);
      current_statement__ = 26;
      validate_non_negative_index("y1hat", "N_t", N_t);
      current_statement__ = 27;
      validate_non_negative_index("theta", "1", 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "vdp_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ eps;
      eps = DUMMY_VAR__;
      
      current_statement__ = 1;
      eps = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        eps = stan::math::lb_constrain(eps, 0, lp__);
      } else {
        current_statement__ = 1;
        eps = stan::math::lb_constrain(eps, 0);
      }
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 2;
      sigma = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 2;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      std::vector<std::vector<local_scalar_t__>> y;
      y = std::vector<std::vector<local_scalar_t__>>(N_t, std::vector<local_scalar_t__>(2, DUMMY_VAR__));
      
      std::vector<local_scalar_t__> y1hat;
      y1hat = std::vector<local_scalar_t__>(N_t, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> theta;
      theta = std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      
      current_statement__ = 5;
      assign(theta, nil_index_list(), std::vector<local_scalar_t__>{eps},
        "assigning variable theta");
      current_statement__ = 10;
      if (logical_eq(use_ckrk, 1)) {
        current_statement__ = 8;
        assign(y, nil_index_list(),
          integrate_ode_adams(vdp_functor__(), y0, t0, t, theta, x_r, x_i,
            pstream__, 1e-6, 1e-8, 100000), "assigning variable y");
      } else {
        current_statement__ = 6;
        assign(y, nil_index_list(),
          integrate_ode_bdf(vdp_functor__(), y0, t0, t, theta, x_r, x_i,
            pstream__, 1e-6, 1e-8, 100000), "assigning variable y");
      }
      current_statement__ = 11;
      assign(y1hat, nil_index_list(),
        rvalue(y,
          cons_list(index_omni(), cons_list(index_uni(1), nil_index_list())),
          "y"), "assigning variable y1hat");
      {
        current_statement__ = 12;
        lp_accum__.add(
          lognormal_lpdf<propto__>(eps, stan::math::log(0.1), 0.2));
        current_statement__ = 13;
        lp_accum__.add(cauchy_lpdf<propto__>(sigma, 0, 0.5));
        current_statement__ = 14;
        lp_accum__.add(normal_lpdf<propto__>(y1, y1hat, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "vdp_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double eps;
      eps = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      eps = in__.scalar();
      current_statement__ = 1;
      eps = stan::math::lb_constrain(eps, 0);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma = in__.scalar();
      current_statement__ = 2;
      sigma = stan::math::lb_constrain(sigma, 0);
      std::vector<std::vector<double>> y;
      y = std::vector<std::vector<double>>(N_t, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<double> y1hat;
      y1hat = std::vector<double>(N_t, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> theta;
      theta = std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(eps);
      vars__.emplace_back(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      assign(theta, nil_index_list(), std::vector<local_scalar_t__>{eps},
        "assigning variable theta");
      current_statement__ = 10;
      if (logical_eq(use_ckrk, 1)) {
        current_statement__ = 8;
        assign(y, nil_index_list(),
          integrate_ode_adams(vdp_functor__(), y0, t0, t, theta, x_r, x_i,
            pstream__, 1e-6, 1e-8, 100000), "assigning variable y");
      } else {
        current_statement__ = 6;
        assign(y, nil_index_list(),
          integrate_ode_bdf(vdp_functor__(), y0, t0, t, theta, x_r, x_i,
            pstream__, 1e-6, 1e-8, 100000), "assigning variable y");
      }
      current_statement__ = 11;
      assign(y1hat, nil_index_list(),
        rvalue(y,
          cons_list(index_omni(), cons_list(index_uni(1), nil_index_list())),
          "y"), "assigning variable y1hat");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
            vars__.emplace_back(y[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
          vars__.emplace_back(y1hat[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          vars__.emplace_back(theta[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double eps;
      eps = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      eps = context__.vals_r("eps")[(1 - 1)];
      double eps_free__;
      eps_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      eps_free__ = stan::math::lb_free(eps, 0);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      vars__.emplace_back(eps_free__);
      vars__.emplace_back(sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("eps");
    names__.emplace_back("sigma");
    names__.emplace_back("y");
    names__.emplace_back("y1hat");
    names__.emplace_back("theta");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_t),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_t)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(1)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "eps");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1hat" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "eps");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1hat" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"eps\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" << N_t << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"y1hat\",\"type\":{\"name\":\"array\",\"length\":" << N_t << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << 1 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"eps\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" << N_t << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"y1hat\",\"type\":{\"name\":\"array\",\"length\":" << N_t << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << 1 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = vdp_model_namespace::vdp_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return vdp_model_namespace::profiles__;
}

#endif


