#include <stan/math/rev/scal.hpp>
#include <gtest/gtest.h>
#include <vector>
#include <algorithm>

struct TestValue {
  unsigned int n;
  double mu;
  double phi;
  double value;
  double grad_mu;
  double grad_phi;

  TestValue(unsigned int _n, double _mu, double _phi, double _value,
            double _grad_mu, double _grad_phi)
      : n(_n),
        mu(_mu),
        phi(_phi),
        value(_value),
        grad_mu(_grad_mu),
        grad_phi(_grad_phi) {}
};

// Test data generated in Mathematica (Wolfram Cloud) via
// nb2[n_,mu_,phi_]:= LogGamma[n + phi] - LogGamma[n + 1] - LogGamma[phi ]+
//   n * (Log[mu] - Log[mu + phi]) + phi * (Log[phi] - Log[mu + phi])
// nb2dmu[n_,mu_,phi_]= D[nb2[n, mu, phi],mu];
// nb2dphi[n_,mu_,phi_]= D[nb2[n, mu, phi],phi];
// out = OpenWrite["nb_test.txt"]
// mus= {256*10^-7,314*10^-3,15*10^-1,3,180,  1123,10586};
//  phis=  {4*10^-4,65*10^-3,442*10^-2,800, 15324};
// ns = {0,6,14,1525,10233};
//  WriteString[out, "std::array<TestValue, ",
//      Length[mus]*Length[phis]*Length[ns], "> testValues = {"];
//    Block[{$MaxPrecision = 80, $MinPrecision = 40}, {
//      For[i = 1, i <= Length[mus], i++, {
//        For[j = 1, j <= Length[phis], j++, {
//        For[k = 1, k <= Length[ns], k++, {
//          cmu = mus[[i]];
//          cphi = phis[[j]];
//     cn=ns[[k]];
//          val = N[nb2[cn,cmu,cphi]];
//     ddmu= N[nb2dmu[cn,cmu,cphi]];
//     ddphi= N[nb2dphi[cn,cmu,cphi]];
//          WriteString[out,"  TestValue(",CForm[cn],",",CForm[cmu],",",
//            CForm[cphi],",", CForm[val],","CForm[ddmu],",",CForm[ddphi],"),"]
//        }]
//      }]
//   }]
//    }];
//  WriteString[out,"};"];
//  Close[out];
//  FilePrint[%]
std::array<TestValue, 175> testValues
    = {TestValue(0, 0.0000256, 0.0004, -0.000024814156367780882,
                 -0.9398496240601504, -0.0018850149796021398),
       TestValue(6, 0.0000256, 0.0004, -26.480362597222488, 220276.31578947368,
                 -11595.463497838708),
       TestValue(14, 0.0000256, 0.0004, -49.814562438358635, 513979.32330827066,
                 -30391.559221530802),
       TestValue(1525, 0.0000256, 0.0004, -4301.784727467015,
                 5.5987134868421055e7, -3.580668787634408e6),
       TestValue(10233, 0.0000256, 0.0004, -28781.07085289515,
                 3.7568285855263156e8, -2.4041193199521683e7),
       TestValue(0, 0.0000256, 0.065, -0.000025594960092480967,
                 -0.9996063088998794, -7.751668684718993e-8),
       TestValue(6, 0.0000256, 0.065, -51.41938813644809, 234281.72904210034,
                 -74.69380754597304),
       TestValue(14, 0.0000256, 0.065, -114.92817109028836, 546658.7005733127,
                 -196.83239209326592),
       TestValue(1525, 0.0000256, 0.065, -11965.467128123484,
                 5.954685919853104e7, -23429.11268911477),
       TestValue(10233, 0.0000256, 0.065, -80237.4790550341,
                 3.995691927102557e8, -157343.697098361),
       TestValue(0, 0.0000256, 4.42, -0.000025599925864390194,
                 -0.9999942081783417, -1.677258332222209e-11),
       TestValue(6, 0.0000256, 4.42, -67.52038137511191, 234372.6425475907,
                 -0.4312559247584902),
       TestValue(14, 0.0000256, 4.42, -161.64931287705224, 546870.8326033225,
                 -1.650128690902025),
       TestValue(1525, 0.0000256, 4.42, -18367.34289180058, 5.956996647937967e7,
                 -339.0570825343945),
       TestValue(10233, 0.0000256, 4.42, -123371.16336416776,
                 3.997242463550437e8, -2307.279979293951),
       TestValue(0, 0.0000256, 800, -0.00002559999998652529, -0.999999968000001,
                 -8.881784197001252e-16),
       TestValue(6, 0.0000256, 800, -69.9980790657431, 234373.99250003224,
                 -0.000023330384471442756),
       TestValue(14, 0.0000256, 800, -173.09898662779824, 546873.9825000325,
                 -0.00014060727924558591),
       TestValue(1525, 0.0000256, 800, -24826.22813563853, 5.957030959375009e7,
                 -0.8389762876176414),
       TestValue(10233, 0.0000256, 800, -173733.65594636812,
                 3.997265487087504e8, -10.166635446653597),
       TestValue(0, 0.0000256, 15324, -0.000025599996959613236,
                 -0.9999999983294179, 0.),
       TestValue(6, 0.0000256, 15324, -70.01580732128963, 234373.99960845898,
                 -6.386142814562845e-8),
       TestValue(14, 0.0000256, 15324, -173.20616504262574, 546873.9990864021,
                 -3.872936886750722e-7),
       TestValue(1525, 0.0000256, 15324, -25707.717028801628,
                 5.957031140048291e7, -0.004643062913324059),
       TestValue(10233, 0.0000256, 15324, -189611.39394380094,
                 3.9972656083222395e8, -0.15627194690990365),
       TestValue(0, 0.314, 0.0004, -0.002666782716971683, -0.001272264631043257,
                 -5.66822905706025),
       TestValue(6, 0.314, 0.0004, -9.625197494412376, 0.023038524497171847,
                 2477.530549555817),
       TestValue(14, 0.314, 0.0004, -10.482321240387563, 0.05545291000145865,
                 2452.982014445862),
       TestValue(1525, 0.314, 0.0004, -17.094738795518424, 6.1777199721236284,
                 -2348.2711549792057),
       TestValue(10233, 0.314, 0.0004, -30.083534640958533, 41.460778593539814,
                 -30043.568270589793),
       TestValue(0, 0.314, 0.065, -0.11460468078714132, -0.17150395778364116,
                 -0.9346528929704305),
       TestValue(6, 0.314, 0.065, -5.6231627412658, 3.1056417323496293,
                 0.8117566646875254),
       TestValue(14, 0.314, 0.065, -7.917539720426937, 7.4751693191939905,
                 -19.40653851445296),
       TestValue(1525, 0.314, 0.065, -296.58556828610017, 832.7696922844226,
                 -4001.4921811261693),
       TestValue(10233, 0.314, 0.065, -1936.716591758479, 5589.00047056451,
                 -26975.841613138524),
       TestValue(0, 0.314, 4.42, -0.30334820230965986, -0.9336713138994508,
                 -0.00230212890163628),
       TestValue(6, 0.314, 4.42, -11.748118636048988, 16.90718181793719,
                 -0.3435269754367143),
       TestValue(14, 0.314, 4.42, -31.109603016060397, 40.69498599371937,
                 -1.4423583039713965),
       TestValue(1525, 0.314, 4.42, -4115.10160678526, 4533.61649969458,
                 -316.1764856190919),
       TestValue(10233, 0.314, 4.42, -27734.55588693275, 30426.641345033488,
                 -2153.7342775414127),
       TestValue(0, 0.314, 800, -0.31393839362010567, -0.9996076539958066,
                 -7.698783210940974e-8),
       TestValue(6, 0.314, 800, -13.827010724886122, 18.101175543376296,
                 -0.000020465017271042996),
       TestValue(14, 0.314, 800, -41.61461010763844, 43.568886473205765,
                 -0.00013381877200302483),
       TestValue(1525, 0.314, 800, -10469.94267675256, 4853.782788344746,
                 -0.8382285160349765),
       TestValue(10233, 0.314, 800, -77398.83453431107, 32575.386135464123,
                 -10.16161733713528),
       TestValue(0, 0.314, 15324, -0.31399678298770084, -0.9999795096863716,
                 -2.099280749234822e-10),
       TestValue(6, 0.314, 15324, -13.842565956968983, 18.10790921043538,
                 -5.6049177743489054e-8),
       TestValue(14, 0.314, 15324, -41.71664028188991, 43.58509417059771,
                 -3.687852014877535e-7),
       TestValue(1525, 0.314, 15324, -11350.864477542971, 4855.588403521258,
                 -0.004641024152967077),
       TestValue(10233, 0.314, 15324, -93272.76691554434, 32587.50423265796,
                 -0.15625826529496223),
       TestValue(0, 1.5, 0.0004, -0.003291911100032755, -0.00026659557451346307,
                 -7.230044345656401),
       TestValue(6, 1.5, 0.0004, -9.619783961619232, 0.0007997867235403892,
                 2491.0537701151675),
       TestValue(14, 1.5, 0.0004, -10.468856159359483, 0.002221629787612192,
                 2486.6186161358087),
       TestValue(1525, 1.5, 0.0004, -15.560537541616213, 0.270772238514174,
                 1484.280307752038),
       TestValue(10233, 1.5, 0.0004, -19.785223133323598, 1.8184484137563317,
                 -4317.601447204935),
       TestValue(0, 1.5, 0.065, -0.2067814991501101, -0.04153354632587859,
                 -2.2227873794044952),
       TestValue(6, 1.5, 0.065, -4.841004539887443, 0.12460063897763578,
                 11.520890928200775),
       TestValue(14, 1.5, 0.065, -5.969601492726813, 0.34611288604898827,
                 7.298954082323366),
       TestValue(1525, 1.5, 0.065, -74.45092758687497, 42.184238551650694,
                 -953.4745083343279),
       TestValue(10233, 1.5, 0.065, -445.630392408013, 283.3003194888179,
                 -6515.787894589817),
       TestValue(0, 1.5, 4.42, -1.2915096474038796, -0.7466216216216216,
                 -0.03881837442792935),
       TestValue(6, 1.5, 4.42, -4.694711300875651, 2.239864864864865,
                 -0.12612961153608993),
       TestValue(14, 1.5, 4.42, -13.334103973863655, 6.221846846846847,
                 -0.8864094608348823),
       TestValue(1525, 1.5, 4.42, -2072.1910365790172, 758.3186936936937,
                 -251.67662613527665),
       TestValue(10233, 1.5, 4.42, -14020.648493631525, 5092.706081081081,
                 -1720.7211329093311),
       TestValue(0, 1.5, 800, -1.4985955053447242, -0.9981285090455396,
                 -1.7534272203079126e-6),
       TestValue(6, 1.5, 800, -5.63758835785638, 2.9943855271366187,
                 -0.00001104786953298742),
       TestValue(14, 1.5, 800, -20.926415102269573, 8.317737575379496,
                 -0.00010961017476240897),
       TestValue(1525, 1.5, 800, -8088.548799680884, 1013.7658556872531,
                 -0.8354105724129193),
       TestValue(10233, 1.5, 800, -61412.52664040723, 6808.234560199626,
                 -10.142698900729565),
       TestValue(0, 1.5, 15324, -1.499926590534038, -0.9999021239111285,
                 -4.790177143831897e-9),
       TestValue(6, 1.5, 15324, -5.645995699555982, 2.9997063717333856,
                 -3.032959305926397e-8),
       TestValue(14, 1.5, 15324, -21.010069937864472, 8.332517699259403,
                 -3.0266583905813604e-7),
       TestValue(1525, 1.5, 15324, -8967.33164084002, 1015.5672571857361,
                 -0.004633327525485953),
       TestValue(10233, 1.5, 15324, -77272.09898456372, 6820.332387197807,
                 -0.15620659350885369),
       TestValue(0, 3, 0.0004, -0.003569116649587855, -0.0001333155579256099,
                 -7.922924939527562),
       TestValue(6, 3, 0.0004, -9.619261327135609, 0.0001333155579256099,
                 2492.360089770114),
       TestValue(14, 3, 0.0004, -10.467267071498288, 0.0004888237123939031,
                 2490.5905361225123),
       TestValue(1525, 3, 0.0004, -15.357522072066786, 0.06763542638759276,
                 1991.7174903993568),
       TestValue(10233, 3, 0.0004, -18.421373162287637, 0.4546060525263298,
                 -908.6583034400528),
       TestValue(0, 3, 0.065, -0.25047201260085383, -0.021207177814029365,
                 -2.874622756288704),
       TestValue(6, 3, 0.065, -4.758782442354863, 0.021207177814029365,
                 12.74533572164111),
       TestValue(14, 3, 0.065, -5.719495913883133, 0.07775965198477433,
                 11.025105769529759),
       TestValue(1525, 3, 0.065, -42.491829475397026, 10.75910821098423,
                 -477.2384670870571),
       TestValue(10233, 3, 0.065, -230.9301248894044, 72.31647634584013,
                 -3316.4438994781904),
       TestValue(0, 3, 4.42, -2.2897339760163957, -0.5956873315363881,
                 -0.11372669262607049),
       TestValue(6, 3, 4.42, -2.889108195828742, 0.5956873315363881,
                 0.003850246852058703),
       TestValue(14, 3, 4.42, -7.790064290604171, 2.18418688230009,
                 -0.4832453669983474),
       TestValue(1525, 3, 4.42, -1360.5497881858591, 302.2120395327942,
                 -199.67578957112616),
       TestValue(10233, 3, 4.42, -9239.719029853994, 2031.2938005390836,
                 -1371.3592560596119),
       TestValue(0, 3, 800, -2.994389023067612, -0.9962640099626401,
                 -6.996241475043519e-6),
       TestValue(6, 3, 800, -2.9857172436025223, 0.9962640099626401,
                 -2.3069406651643476e-6),
       TestValue(14, 3, 800, -12.744324478713366, 3.65296803652968,
                 -0.00008222425506509978),
       TestValue(1525, 3, 800, -7035.84649923785, 505.4379410543794,
                 -0.8318616138503963),
       TestValue(10233, 3, 800, -54340.180404088605, 3397.2602739726026,
                 -10.118854869649681),
       TestValue(0, 3, 15324, -2.999706381300726, -0.9998042669798395,
                 -1.9158207464897714e-8),
       TestValue(6, 3, 15324, -2.9874796347589054, 0.9998042669798395,
                 -6.3824572293924575e-9),
       TestValue(14, 3, 15324, -12.807159398982407, 3.665948978926078,
                 -2.2763181739549054e-7),
       TestValue(1525, 3, 15324, -7911.931224008331, 507.2340314477719,
                 -0.004623603455756964),
       TestValue(10233, 3, 15324, -70181.6251826905, 3409.332550401253,
                 -0.15614126136305728),
       TestValue(0, 180, 0.0004, -0.0052068020335865025, -2.2222172839615914e-6,
                 -12.01700730618354),
       TestValue(6, 180, 0.0004, -9.62011239916672, -2.148143374496205e-6,
                 2490.2324075130828),
       TestValue(14, 180, 0.0004, -10.467069325725546, -2.04937816187569e-6,
                 2491.084720678314),
       TestValue(1525, 180, 0.0004, -15.159228863591125,
                 0.000016604901371824113, 2487.4167692289852),
       TestValue(10233, 180, 0.0004, -17.08144177432405, 0.00012411083530925487,
                 2440.94300115826),
       TestValue(0, 180, 0.065, -0.5152345838836883, -0.00036098075694887956,
                 -6.927046886659846),
       TestValue(6, 180, 0.065, -4.897099604874426, -0.0003489480650505836,
                 10.617175935000475),
       TestValue(14, 180, 0.065, -5.689219198051667, -0.0003329044758528556,
                 11.4626317745298),
       TestValue(1525, 180, 0.065, -10.618383986015033, 0.0026973284338680167,
                 7.7929628140754765),
       TestValue(10233, 180, 0.065, -15.542242814932251, 0.020160775275594924,
                 -38.6634853761835),
       TestValue(0, 180, 4.42, -16.491356225074536, -0.023967031775295522,
                 -2.755043100796684),
       TestValue(6, 180, 4.42, -11.802883319144515, -0.023168130716119003,
                 -1.8613752566654882),
       TestValue(14, 180, 4.42, -9.653376579596795, -0.022102929303883648,
                 -1.313682997645138),
       TestValue(1525, 180, 4.42, -30.756932642065294, 0.1790869874320693,
                 -5.0606677133089075),
       TestValue(10233, 180, 4.42, -235.49737914944126, 1.3385587246502548,
                 -50.37753458197702),
       TestValue(0, 180, 800, -162.35267519735217, -0.8163265306122449,
                 -0.01926737460893513),
       TestValue(6, 180, 800, -138.9731231908616, -0.7891156462585034,
                 -0.017913154212997107),
       TestValue(14, 180, 800, -117.57055678993851, -0.7528344671201814,
                 -0.016193696733894036),
       TestValue(1525, 180, 800, -1255.1060610431614, 6.099773242630386,
                 -0.5081161722061651),
       TestValue(10233, 180, 800, -14640.50246307096, 45.59183673469388,
                 -7.836489965276398),
       TestValue(0, 180, 15324, -178.95104102256036, -0.9883900928792569,
                 -0.00006792118926490787),
       TestValue(6, 180, 15324, -154.44163935947577, -0.9554437564499484,
                 -0.00006343927721985665),
       TestValue(14, 180, 15324, -131.5984192349756, -0.911515307877537,
                 -0.000057701678183974536),
       TestValue(1525, 180, 15324, -1861.5172673616398, 7.38547041623667,
                 -0.0035556000115217756),
       TestValue(10233, 180, 15324, -28577.644697168085, 55.2015866873065,
                 -0.14858705144088802),
       TestValue(0, 1123, 0.0004, -0.005939122128713381, -3.5618865318302646e-7,
                 -13.847805677972104),
       TestValue(6, 1123, 0.0004, -9.620833523075628, -3.5428559715533445e-7,
                 2488.429599570756),
       TestValue(14, 1123, 0.0004, -10.467775521386166, -3.517481891184117e-7,
                 2489.3192333086026),
       TestValue(1525, 1123, 0.0004, -15.157115486355906, 1.2750475385536657e-7,
                 2492.70020501204),
       TestValue(10233, 1123, 0.0004, -17.063078998820856,
                 2.8894734020457448e-6, 2486.849880233364),
       TestValue(0, 1123, 0.065, -0.6342170147837343, -0.000057877326779839104,
                 -8.75724272015346),
       TestValue(6, 1123, 0.065, -5.014263034227778, -0.000057568097963562137,
                 8.814958879676311),
       TestValue(14, 1123, 0.065, -5.803957292009425, -0.000057155792875192846,
                 9.697719756764902),
       TestValue(1525, 1123, 0.065, -10.275036857130544,
                 0.000020718330690556827, 13.074039765317043),
       TestValue(10233, 1123, 0.065, -12.558918107941281, 0.0004695124193805291,
                 7.224124958319663),
       TestValue(0, 1123, 4.42, -24.493639593452325, -0.00392045555338738,
                 -4.545467874886493),
       TestValue(6, 1123, 4.42, -19.68318216630322, -0.003899509219175159,
                 -3.624587483847729),
       TestValue(14, 1123, 4.42, -17.37102939846337, -0.003871580773558864,
                 -3.040611828950623),
       TestValue(1525, 1123, 4.42, -7.7548168672583415, 0.0014034043922188128,
                 0.0654298516080507),
       TestValue(10233, 1123, 4.42, -35.45506157865748, 0.031803517445555686,
                 -5.756960605210265),
       TestValue(0, 1123, 800, -701.6240143366822, -0.4160166406656266,
                 -0.29304665858647905),
       TestValue(6, 1123, 800, -671.3041847506472, -0.4137939337698174,
                 -0.28869011401594236),
       TestValue(14, 1123, 800, -640.6479149103316, -0.4108303245754051,
                 -0.2829675576373729),
       TestValue(1525, 1123, 800, -30.39018204828426, 0.14892136201921807,
                 -0.018804728472968435),
       TestValue(10233, 1123, 800, -3343.1303902972795, 3.3748099701370067,
                 -2.9898053694742615),
       TestValue(0, 1123, 15324, -1083.757151397245, -0.9317200705295798,
                 -0.002442933450309326),
       TestValue(6, 1123, 15324, -1048.6172073187354, -0.9267420470004815,
                 -0.002416262805940761),
       TestValue(14, 1123, 15324, -1011.5999306403351, -0.920104682295017,
                 -0.00238094023047708),
       TestValue(1525, 1123, 15324, -64.3938471491183, 0.33352757644959136,
                 -0.00029097614079454104),
       TestValue(10233, 1123, 15324, -11352.060718035325, 7.558299058347705,
                 -0.11311918072723515),
       TestValue(0, 10586, 0.0004, -0.006836533480423993, -3.778575334268833e-8,
                 -16.091333738845734),
       TestValue(6, 10586, 0.0004, -9.621729024009568, -3.776433689454398e-8,
                 2486.19084755338),
       TestValue(14, 10586, 0.0004, -10.468668475096411, -3.7735781630351504e-8,
                 2487.0868493492235),
       TestValue(1525, 10586, 0.0004, -15.157527333190956,
                 -3.234240610599839e-8, 2491.6705880068075),
       TestValue(10233, 10586, 0.0004, -17.060718192660715,
                 -1.2600010324928188e-9, 2492.7518943576556),
       TestValue(0, 10586, 0.065, -0.7800430171085975, -6.1401474485561915e-6,
                 -11.00066794181818),
       TestValue(6, 10586, 0.065, -5.159778603540011, -6.1366672969700086e-6,
                 6.57630939764217),
       TestValue(14, 10586, 0.065, -5.949058950638154, -6.132027094855097e-6,
                 7.465437927571536),
       TestValue(1525, 10586, 0.065, -10.34196113541293, -5.255608920401252e-6,
                 12.044448366424728),
       TestValue(10233, 10586, 0.065, -12.175300607224926,
                 -2.047489183204549e-7, 13.125723676609066),
       TestValue(0, 10586, 4.42, -34.3945190758502, -0.0004173583295091224,
                 -6.781982760105572),
       TestValue(6, 10586, 4.42, -29.562997357281894, -0.00041712177651676886,
                 -5.856347033468785),
       TestValue(14, 10586, 4.42, -27.2227588675498, -0.0004168063725269641,
                 -5.266030931107645),
       TestValue(1525, 10586, 4.42, -12.301855613945008, -0.0003572344439525938,
                 -0.9624372357797295),
       TestValue(10233, 10586, 4.42, -9.430792045634007,
                 -0.00001391720105013416, 0.11674937200192481),
       TestValue(0, 10586, 800, -2124.4224654744803, -0.07026172492534692,
                 -1.7257898067684474),
       TestValue(6, 10586, 800, -2091.312452085902, -0.07022190154073024,
                 -1.7188401003298583),
       TestValue(14, 10586, 800, -2056.9359371755286, -0.07016880369457469,
                 -1.7096599947938858),
       TestValue(1525, 10586, 800, -744.0169167062886, -0.060139948001942986,
                 -0.7924525685250288),
       TestValue(10233, 10586, 800, -7.2703661972227565, -0.0023429424616141564,
                 0.00008904830662359586),
       TestValue(0, 10586, 15324, -8048.29915678056, -0.5914318795831726,
                 -0.11664064731878732),
       TestValue(6, 10586, 15324, -8002.424955944863, -0.5910966640836922,
                 -0.11648073932479441),
       TestValue(14, 10586, 15324, -7951.095336923546, -0.590649710084385,
                 -0.11626776694982688),
       TestValue(1525, 10586, 15324, -4300.645593413912, -0.506231273465249,
                 -0.08062419697917278),
       TestValue(10233, 10586, 15324, -9.327824035135563, -0.019721845219427537,
                 -0.00008059480749977865)};

TEST(ProbDistributionsNegBinomial, derivativesPrecomputed) {
  using stan::math::is_nan;
  using stan::math::neg_binomial_2_log;
  using stan::math::value_of;
  using stan::math::var;

  for (auto iter = testValues.begin(); iter != testValues.end(); ++iter) {
    TestValue t = *iter;
    unsigned int n = t.n;
    var mu(t.mu);
    var phi(t.phi);
    var val = neg_binomial_2_log(n, mu, phi);

    std::vector<var> x;
    x.push_back(mu);
    x.push_back(phi);

    std::vector<double> gradients;
    val.grad(x, gradients);

    for (int i = 0; i < 2; ++i) {
      EXPECT_FALSE(is_nan(gradients[i]));
    }

    EXPECT_NEAR(value_of(val), t.value, fabs(t.value * 1e-8))
        << "value n = " << n << ", mu = " << t.mu << ", phi = " << t.phi;
    EXPECT_NEAR(gradients[0], t.grad_mu, fabs(t.grad_mu * 1e-8))
        << "grad_mu n = " << n << ", mu = " << t.mu << ", phi = " << t.phi;
    EXPECT_NEAR(gradients[1], t.grad_phi, fabs(t.grad_phi * 1e-8))
        << "grad_phi n = " << n << ", mu = " << t.mu << ", phi = " << t.phi;
  }
}

TEST(ProbDistributionsNegBinomial, derivativesFiniteDiffs) {
  using stan::math::is_nan;
  using stan::math::neg_binomial_2_log;
  using stan::math::var;

  // The range of values tested has to be quite conservative to let the test
  // pass
  std::array<unsigned int, 1> n_to_test = {100};
  std::array<double, 1> mu_to_test = {8};
  // std::array<unsigned int, 3> n_to_test = {7, 100, 835};
  // std::array<double, 2> mu_to_test = {8, 24};
  // std::array<unsigned int, 5> n_to_test = {0, 7, 100, 835};
  // std::array<double, 6> mu_to_test = {0.8, 8, 24, 271};
  double phi_cutoff = stan::math::internal::neg_binomial_2_phi_cutoff;
  for (auto mu_iter = mu_to_test.begin(); mu_iter != mu_to_test.end();
       ++mu_iter) {
    for (auto n_iter = n_to_test.begin(); n_iter != n_to_test.end(); ++n_iter) {
      double mu_dbl = *mu_iter;
      unsigned int n = *n_iter;
      double phi_dbl = 1.5;

      for (int k = 0; k < 20; ++k) {
        var mu(mu_dbl);
        var phi(phi_dbl);
        var val = neg_binomial_2_log(n, mu, phi);

        std::vector<var> x;
        x.push_back(mu);
        x.push_back(phi);

        std::vector<double> gradients;
        val.grad(x, gradients);

        for (int i = 0; i < 2; ++i) {
          EXPECT_FALSE(is_nan(gradients[i]));
        }

        std::vector<double> finite_diffs;
        double eps = 1e-10;
        double inv2e = 0.5 / eps;
        double dmu = neg_binomial_2_log(n, mu_dbl + eps, phi_dbl)
                     - neg_binomial_2_log(n, mu_dbl - eps, phi_dbl);
        double dphi = neg_binomial_2_log(n, mu_dbl, phi_dbl + eps)
                      - neg_binomial_2_log(n, mu_dbl, phi_dbl - eps);
        finite_diffs.push_back(dmu * inv2e);
        finite_diffs.push_back(dphi * inv2e);

        for (int i = 0; i < 2; ++i) {
          EXPECT_NEAR(gradients[i], finite_diffs[i],
                      std::max(1.0, gradients[i] * 1e-4))
              << "for i = " << i << ", n = " << n << ", mu = " << mu_dbl
              << "  +/- epsilon, phi = " << phi_dbl << " +/- epsilon";
        }

        phi_dbl *= 10;
      }
    }
  }
}

TEST(ProbDistributionsNegativeBinomial2, proptoAtPoissonCutoff) {
  using stan::math::internal::neg_binomial_2_phi_cutoff;
  using stan::math::neg_binomial_2_lpmf;
  using stan::math::var;

  var mu_var(10);
  int y = 11.8;
  var value_before_cutoff = neg_binomial_2_lpmf<true, int, var, double>(
      y, mu_var, neg_binomial_2_phi_cutoff - 1e-8);
  var value_after_cutoff = neg_binomial_2_lpmf<true, int, var, double>(
      y, mu_var, neg_binomial_2_phi_cutoff + 1e-8);

  EXPECT_NEAR(value_of(value_before_cutoff), value_of(value_after_cutoff), 1);
}

// TODO(martinmodrak) test continuity of derivatives at cutoff
