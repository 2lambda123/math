#include <stan/math/rev/scal.hpp>
#include <boost/math/differentiation/finite_difference.hpp>
#include <boost/math/special_functions/digamma.hpp>
#include <test/unit/math/expect_near_rel.hpp>
#include <gtest/gtest.h>
#include <vector>
#include <algorithm>

namespace neg_binomial_2_test_internal {
struct TestValue {
  int n;
  double mu;
  double phi;
  double value;
  double grad_mu;
  double grad_phi;

  TestValue(int _n, double _mu, double _phi, double _value, double _grad_mu,
            double _grad_phi)
      : n(_n),
        mu(_mu),
        phi(_phi),
        value(_value),
        grad_mu(_grad_mu),
        grad_phi(_grad_phi) {}
};

// Test data generated in Mathematica (Wolfram Cloud). The code can be re-ran
// at https://www.wolframcloud.com/env/martin.modrak/NegBinomial2_Tests.nb
// but is also presented below for convenience:
//
// nb2[n_,mu_,phi_]:= LogGamma[n + phi] - LogGamma[n + 1] - LogGamma[phi] + 
//    n * (Log[mu] - Log[mu + phi]) + phi * (Log[phi] - Log[mu + phi])
// nb2dmu[n_,mu_,phi_]= D[nb2[n, mu, phi],mu];
// nb2dphi[n_,mu_,phi_]= D[nb2[n, mu, phi],phi];
// out = OpenWrite["nb_test.txt"] 
// mus= {256*10^-7,314*10^-3,15*10^-1,3,180,  1123,10586};
// phis=  {4*10^-4,65*10^-3,442*10^-2,800, 15324};
// ns = {0,6,14,1525,10233};
//  WriteString[out, "std::vector<TestValue> testValues = {"];
//      For[k = 1, k <= Length[ns], k++, {
//   For[i = 1, i <= Length[mus], i++, {
//        For[j = 1, j <= Length[phis], j++, {
//          cmu = mus[[i]];
//          cphi = phis[[j]];
//     cn=ns[[k]];
//          val = N[nb2[cn,cmu,cphi], 20];
//     ddmu= N[nb2dmu[cn,cmu,cphi], 20];
//     ddphi= N[nb2dphi[cn,cmu,cphi], 20];
//         WriteString[out,"  TestValue(",CForm[cn],",",CForm[cmu],",",
//            CForm[cphi],",", CForm[val],",",CForm[ddmu],",",CForm[ddphi],"),"]
//        }]
//      }]
//   }]
// WriteString[out,"};"];
//  Close[out];
//  FilePrint[%]
std::vector<TestValue> testValues = {  TestValue(0,0.0000256,0.0004,-0.000024814156367781056525,-0.93984962406015037594,-0.001885014979603017252),  TestValue(0,0.0000256,0.065,-0.000025594960092486140389,-0.9996063088998794321,-7.7516686911183493794e-8),  TestValue(0,0.0000256,4.42,-0.000025599925864539648095,-0.9999942081783417725,-1.6772663823239562834e-11),  TestValue(0,0.0000256,800,-0.000025599999590400008738,-0.999999968000001024,-5.119999781546674531e-16),  TestValue(0,0.0000256,15324,-0.000025599999978616549228,-0.99999999832941790934,-1.3954222623666383236e-18),  TestValue(0,0.314,0.0004,-0.002666782716971682618,-0.0012722646310432569975,-5.668229057060249802),  TestValue(0,0.314,0.065,-0.11460468078714130042,-0.17150395778364116095,-0.93465289297043039811),  TestValue(0,0.314,4.42,-0.30334820230965961631,-0.93367131389945078158,-0.0023021289016362151355),  TestValue(0,0.314,800,-0.313938393619808991,-0.99960765399580664589,-7.6987831407130236997e-8),  TestValue(0,0.314,15324,-0.3139967829987878124,-0.99997950968637160528,-2.0992934397861783072e-10),  TestValue(0,1.5,0.0004,-0.0032919111000327549336,-0.00026659557451346307651,-7.2300443456564007971),  TestValue(0,1.5,0.065,-0.20678149915011007124,-0.041533546325878594249,-2.2227873794044950749),  TestValue(0,1.5,4.42,-1.2915096474038793989,-0.74662162162162162162,-0.038818374427929177938),  TestValue(0,1.5,800,-1.4985955053442782733,-0.99812850904553961323,-1.7534272199610668797e-6),  TestValue(0,1.5,15324,-1.4999265905382969801,-0.9999021239111285113,-4.7901769514626171505e-9),  TestValue(0,3,0.0004,-0.003569116649587854519,-0.00013331555792560991868,-7.9229249395275619074),  TestValue(0,3,0.065,-0.25047201260085385312,-0.021207177814029363785,-2.8746227562887040272),  TestValue(0,3,4.42,-2.2897339760163958674,-0.59568733153638814016,-0.11372669262607046311),  TestValue(0,3,800,-2.9943890230675014931,-0.99626400996264009963,-6.9962414744764927742e-6),  TestValue(0,3,15324,-2.9997063813121767354,-0.99980426697983949892,-1.9158207560574170962e-8),  TestValue(0,180,0.0004,-0.0052068020335865022334,-2.2222172839615911965e-6,-12.017007306183539545),  TestValue(0,180,0.065,-0.51523458388368826209,-0.00036098075694887957127,-6.9270468866598452194),  TestValue(0,180,4.42,-16.491356225074536835,-0.023967031775295521093,-2.7550431007966839452),  TestValue(0,180,800,-162.35267519735224589,-0.81632653061224489796,-0.019267374608935205317),  TestValue(0,180,15324,-178.95104102256056893,-0.98839009287925696594,-0.000067921189264833924309),  TestValue(0,1123,0.0004,-0.0059391221287133807664,-3.5618865318302647087e-7,-13.847805677972105099),  TestValue(0,1123,0.065,-0.63421701478373420435,-0.000057877326779839101032,-8.7572427201534599061),  TestValue(0,1123,4.42,-24.493639593452325812,-0.0039204555533873800358,-4.5454678748864927673),  TestValue(0,1123,800,-701.62401433668194795,-0.41601664066562662507,-0.29304665858647906001),  TestValue(0,1123,15324,-1083.7571513972578336,-0.93172007052957986259,-0.0024429334503092957394),  TestValue(0,10586,0.0004,-0.0068365334804239916148,-3.7785753342688330146e-8,-16.09133373884573238),  TestValue(0,10586,0.065,-0.78004301710859758932,-6.1401474485561915594e-6,-11.0006679418181807),  TestValue(0,10586,4.42,-34.39451907585020003,-0.00041735832950912239552,-6.7819827601055724777),  TestValue(0,10586,800,-2124.4224654744799162,-0.070261724925346917267,-1.7257898067684468125),  TestValue(0,10586,15324,-8048.2991567805804192,-0.59143187958317252026,-0.11664064731878857477),  TestValue(6,0.0000256,0.0004,-26.480362597222490265,220276.31578947368421,-11595.463497838709543),  TestValue(6,0.0000256,0.065,-51.419388136448102673,234281.72904210034202,-74.693807545973030394),  TestValue(6,0.0000256,4.42,-67.52038137511190777,234372.64254759067459,-0.43125592475849002503),  TestValue(6,0.0000256,800,-69.998079065742703551,234373.99250003224,-0.000023330384471037817491),  TestValue(6,0.0000256,15324,-70.015807321298395432,234373.99960845899308,-6.3861427657507748849e-8),  TestValue(6,0.314,0.0004,-9.6251974944123758225,0.023038524497171844865,2477.5305495558165941),  TestValue(6,0.314,0.065,-5.6231627412658002701,3.1056417323496294304,0.81175666468752807101),  TestValue(6,0.314,4.42,-11.748118636048988335,16.907181817937188357,-0.34352697543671422216),  TestValue(6,0.314,800,-13.827010724885832016,18.101175543376294868,-0.000020465017270475111936),  TestValue(6,0.314,15324,-13.842565956985816742,18.107909210435378814,-5.6049178830042368725e-8),  TestValue(6,1.5,0.0004,-9.6197839616192332262,0.00079978672354038922954,2491.0537701151673519),  TestValue(6,1.5,0.065,-4.8410045398874440986,0.12460063897763578275,11.520890928200777244),  TestValue(6,1.5,4.42,-4.6947113008756524511,2.2398648648648648649,-0.12612961153608977325),  TestValue(6,1.5,800,-5.6375883578559464151,2.9943855271366188397,-0.000011047869532026303582),  TestValue(6,1.5,15324,-5.6459956995659817151,2.9997063717333855339,-3.0329592747982916341e-8),  TestValue(6,3,0.0004,-9.6192613271356102502,0.00013331555792560991868,2492.3600897701139881),  TestValue(6,3,0.065,-4.7587824423548651205,0.021207177814029363785,12.745335721641112642),  TestValue(6,3,4.42,-2.8891081958287456629,0.59568733153638814016,0.0038502468520587354154),  TestValue(6,3,800,-2.9857172436024219525,0.99626400996264009963,-2.3069406647953774853e-6),  TestValue(6,3,15324,-2.9874796347761073428,0.99980426697983949892,-6.3824584044662864326e-9),  TestValue(6,180,0.0004,-9.620112399166720505,-2.1481433744962048232e-6,2490.2324075130827354),  TestValue(6,180,0.065,-4.897099604874425479,-0.00034894806505058358556,10.617175935000477685),  TestValue(6,180,4.42,-11.802883319144519128,-0.023168130716119003723,-1.861375256665487843),  TestValue(6,180,800,-138.97312319086169782,-0.78911564625850340136,-0.01791315421299756019),  TestValue(6,180,15324,-154.44163935948173426,-0.95544375644994840041,-0.000063439277219443465219),  TestValue(6,1123,0.0004,-9.6208335230756285524,-3.5428559715533443274e-7,2488.4295995707558483),  TestValue(6,1123,0.065,-5.0142630342277769584,-0.000057568097963562133439,8.8149588796763128876),  TestValue(6,1123,4.42,-19.683182166303213058,-0.0038995092191751589493,-3.6245874838477290528),  TestValue(6,1123,800,-671.30418475064697583,-0.4137939337698174,-0.28869011401594177783),  TestValue(6,1123,15324,-1048.6172073187539315,-0.92674204700048148398,-0.0024162628059421836267),  TestValue(6,10586,0.0004,-9.6217290240095637933,-3.7764336894543976284e-8,2486.1908475533798261),  TestValue(6,10586,0.065,-5.1597786035400147054,-6.1366672969700081899e-6,6.576309397642172055),  TestValue(6,10586,4.42,-29.562997357281896989,-0.00041712177651676884042,-5.856347033468783979),  TestValue(6,10586,800,-2091.3124520859014907,-0.07022190154073024605,-1.7188401003298574325),  TestValue(6,10586,15324,-8002.4249559448888988,-0.59109666408369216554,-0.11648073932479483488),  TestValue(14,0.0000256,0.0004,-49.814562438358640072,513979.32330827067669,-30391.559221530806766),  TestValue(14,0.0000256,0.065,-114.92817109028837255,546658.70057331266455,-196.8323920932659291),  TestValue(14,0.0000256,4.42,-161.64931287705226916,546870.83260332247849,-1.6501286909020252132),  TestValue(14,0.0000256,800,-173.09898662779720676,546873.98250003256,-0.00014060727924520899117),  TestValue(14,0.0000256,15324,-173.2061650426294071,546873.99908640208975,-3.8729368917100577369e-7),  TestValue(14,0.314,0.0004,-10.482321240387567839,0.055452910001458647348,2452.9820144458617505),  TestValue(14,0.314,0.065,-7.9175397204269351928,7.475169319193990219,-19.406538514452968028),  TestValue(14,0.314,4.42,-31.109603016060397045,40.694985993719373875,-1.442358303971396938),  TestValue(14,0.314,800,-41.614610107637548392,43.568886473205763553,-0.00013381877200270250453),  TestValue(14,0.314,15324,-41.716640281901644559,43.585094170597712707,-3.6878520278347562598e-7),  TestValue(14,1.5,0.0004,-10.468856159359487018,0.0022216297876121923043,2486.6186161358083867),  TestValue(14,1.5,0.065,-5.9696014927268124315,0.34611288604898828541,7.2989540823233662764),  TestValue(14,1.5,4.42,-13.334103973863653606,6.2218468468468468468,-0.88640946083488260684),  TestValue(14,1.5,800,-20.926415102268522946,8.3177375753794967769,-0.00010961017476158336951),  TestValue(14,1.5,15324,-21.010069937869350607,8.3325176992594042609,-3.0266583844869157132e-7),  TestValue(14,3,0.0004,-10.467267071498293274,0.00048882371239390303515,2490.5905361225120861),  TestValue(14,3,0.065,-5.7194959138831364402,0.077759651984774333877,11.025105769529760809),  TestValue(14,3,4.42,-7.7900642906041824751,2.1841868823000898473,-0.48324536699834770639),  TestValue(14,3,800,-12.744324478712668241,3.6529680365296803653,-0.000082224255065357307428),  TestValue(14,3,15324,-12.807159398994470731,3.6659489789260781627,-2.2763181750167069646e-7),  TestValue(14,180,0.0004,-10.467069325725552339,-2.049378161875689659e-6,2491.0847206783138),  TestValue(14,180,0.065,-5.6892191980516647312,-0.00033290447585285560461,11.462631774529800832),  TestValue(14,180,4.42,-9.6533765795967992717,-0.02210292930388364723,-1.3136829976451384132),  TestValue(14,180,800,-117.57055678993798607,-0.7528344671201814059,-0.016193696733894170103),  TestValue(14,180,15324,-131.59841923497641062,-0.9115153078775369797,-0.000057701678183561534688),  TestValue(14,1123,0.0004,-10.467775521386168611,-3.5174818911841171522e-7,2489.3192333086024842),  TestValue(14,1123,0.065,-5.8039572920094235935,-0.000057155792875192843316,9.6977197567649025541),  TestValue(14,1123,4.42,-17.371029398463366472,-0.0038715807735588641672,-3.0406118289506228066),  TestValue(14,1123,800,-640.64791491033069867,-0.41083032457540509991,-0.28296755763737220502),  TestValue(14,1123,15324,-1011.5999306403485179,-0.92010468229501697917,-0.0023809402304773394913),  TestValue(14,10586,0.0004,-10.468668475096403359,-3.7735781630351504468e-8,2487.0868493492232687),  TestValue(14,10586,0.065,-5.9490589506381604899,-6.1320270948550970306e-6,7.4654379275715350026),  TestValue(14,10586,4.42,-27.222758867549796685,-0.00041680637252696410027,-5.2660309311076446873),  TestValue(14,10586,800,-2056.9359371755272758,-0.070168803694574684427,-1.7096599947938850626),  TestValue(14,10586,15324,-7951.0953369235666607,-0.5906497100843850259,-0.11626776694982782037),  TestValue(1525,0.0000256,0.0004,-4301.7847274670157821,5.5987134868421052632e7,-3.5806687876344080158e6),  TestValue(1525,0.0000256,0.065,-11965.467128123482119,5.9546859198531040083e7,-23429.112689114767404),  TestValue(1525,0.0000256,4.42,-18367.342891800584413,5.9569966479379666941e7,-339.05708253439450269),  TestValue(1525,0.0000256,800,-24826.228135638531385,5.9570309593750093e7,-0.83897628761764105052),  TestValue(1525,0.0000256,15324,-25707.717028801610058,5.9570311400482904473e7,-0.0046430629133236893109),  TestValue(1525,0.314,0.0004,-17.094738795518807033,6.1777199721236284663,-2348.2711549792054389),  TestValue(1525,0.314,0.065,-296.5855682860990671,832.76969228442263415,-4001.4921811261694014),  TestValue(1525,0.314,4.42,-4115.1016067852616032,4533.6164996945796636,-316.17648561909186371),  TestValue(1525,0.314,800,-10469.942676752557863,4853.7827883447466615,-0.83822851603497641238),  TestValue(1525,0.314,15324,-11350.864477542964446,4855.5884035212585267,-0.0046410241529681445478),  TestValue(1525,1.5,0.0004,-15.560537541616769004,0.27077223851417399804,1484.2803077520377337),  TestValue(1525,1.5,0.065,-74.450927586875279684,42.184238551650692226,-953.4745083343278627),  TestValue(1525,1.5,4.42,-2072.1910365790187577,758.31869369369369369,-251.67662613527664787),  TestValue(1525,1.5,800,-8088.5487996808837997,1013.7658556872530672,-0.8354105724129184353),  TestValue(1525,1.5,15324,-8967.3316408400039725,1015.5672571857361913,-0.0046333275254863264045),  TestValue(1525,3,0.0004,-15.357522072066896545,0.067635426387592765409,1991.7174903993567368),  TestValue(1525,3,0.065,-42.491829475398155315,10.75910821098423056,-477.23846708705704922),  TestValue(1525,3,4.42,-1360.5497881858611964,302.21203953279424978,-199.67578957112613322),  TestValue(1525,3,800,-7035.8464992378503203,505.43794105437941054,-0.83186161385039575293),  TestValue(1525,3,15324,-7911.9312240083236782,507.23403144777190579,-0.0046236034557581425194),  TestValue(1525,180,0.0004,-15.159228863591761992,0.000016604901371824111996,2487.4167692289850077),  TestValue(1525,180,0.065,-10.618383986015501881,0.0026973284338680167964,7.7929628140754776749),  TestValue(1525,180,4.42,-30.75693264206759737,0.17908698743206931039,-5.0606677133089086733),  TestValue(1525,180,800,-1255.1060610431618143,6.0997732426303854875,-0.50811617220616562857),  TestValue(1525,180,15324,-1861.5172673616192307,7.3854704162366701066,-0.0035556000115225182714),  TestValue(1525,1123,0.0004,-15.157115486356269288,1.2750475385536655502e-7,2492.7002050120397202),  TestValue(1525,1123,0.065,-10.275036857130705184,0.000020718330690556828686,13.074039765317043251),  TestValue(1525,1123,4.42,-7.754816867258728553,0.0014034043922188128,0.065429851608050629578),  TestValue(1525,1123,800,-30.390182048283734404,0.1489213620192180795,-0.018804728472968400557),  TestValue(1525,1123,15324,-64.393847149111855643,0.33352757644959136666,-0.00029097614079605979039),  TestValue(1525,10586,0.0004,-15.157527333190073382,-3.2342406105998390275e-8,2491.6705880068073821),  TestValue(1525,10586,0.065,-10.341961135413218919,-5.2556089204012518156e-6,12.04444836642472918),  TestValue(1525,10586,4.42,-12.301855613945737855,-0.00035723444395259380558,-0.96243723577972978183),  TestValue(1525,10586,800,-744.01691670628731344,-0.060139948001942982935,-0.79245256852502796007),  TestValue(1525,10586,15324,-4300.6455934139147727,-0.50623127346524902759,-0.080624196979174112178),  TestValue(10233,0.0000256,0.0004,-28781.070852895156444,3.7568285855263157895e8,-2.4041193199521680582e7),  TestValue(10233,0.0000256,0.065,-80237.47905503410844,3.9956919271025565316e8,-157343.69709836101487),  TestValue(10233,0.0000256,4.42,-123371.16336416773985,3.9972424635504373549e8,-2307.2799792939510176),  TestValue(10233,0.0000256,800,-173733.65594636811604,3.9972654870875044132e8,-10.166635446653598855),  TestValue(10233,0.0000256,15324,-189611.39394380092393,3.997265608322239652e8,-0.1562719469099034673),  TestValue(10233,0.314,0.0004,-30.083534640956912654,41.460778593539812969,-30043.568270589792096),  TestValue(10233,0.314,0.065,-1936.7165917584869886,5589.0004705645093525,-26975.841613138526635),  TestValue(10233,0.314,4.42,-27734.555886932752049,30426.6413450334886,-2153.7342775414124626),  TestValue(10233,0.314,800,-77398.834534311059049,32575.386135464123325,-10.161617337135278412),  TestValue(10233,0.314,15324,-93272.766915544350705,32587.504232657958969,-0.15625826529496379204),  TestValue(10233,1.5,0.0004,-19.785223133324616937,1.8184484137563316449,-4317.6014472049352643),  TestValue(10233,1.5,0.065,-445.63039240802026812,283.30031948881789137,-6515.7878945898169301),  TestValue(10233,1.5,4.42,-14020.648493631530079,5092.7060810810810811,-1720.7211329093311099),  TestValue(10233,1.5,800,-61412.526640407231264,6808.2345601996257018,-10.142698900729563784),  TestValue(10233,1.5,15324,-77272.098984563728691,6820.3323871978075756,-0.15620659350885388317),  TestValue(10233,3,0.0004,-18.421373162288964031,0.45460605252632982269,-908.65830344005301507),  TestValue(10233,3,0.065,-230.93012488941404482,72.316476345840130506,-3316.4438994781907491),  TestValue(10233,3,4.42,-9239.7190298539962311,2031.293800539083558,-1371.3592560596120078),  TestValue(10233,3,800,-54340.180404088611315,3397.2602739726027397,-10.118854869649679896),  TestValue(10233,3,15324,-70181.625182690519906,3409.3325504012526913,-0.15614126136305778491),  TestValue(10233,180,0.0004,-17.081441774321808558,0.00012411083530925486832,2440.9430011582593451),  TestValue(10233,180,0.065,-15.542242814932986052,0.020160775275594924055,-38.663485376183506373),  TestValue(10233,180,4.42,-235.49737914944659778,1.3385587246502548531,-50.377534581977016966),  TestValue(10233,180,800,-14640.502463070959489,45.591836734693877551,-7.8364899652763980015),  TestValue(10233,180,15324,-28577.644697168082129,55.201586687306501548,-0.14858705144088737228),  TestValue(10233,1123,0.0004,-17.063078998820718915,2.8894734020457445678e-6,2486.8498802333634116),  TestValue(10233,1123,0.065,-12.558918107945625621,0.00046951241938052912769,7.2241249583196655846),  TestValue(10233,1123,4.42,-35.455061578657784001,0.031803517445555683105,-5.7569606052102630188),  TestValue(10233,1123,800,-3343.1303902972739556,3.3748099701370067269,-2.9898053694742608731),  TestValue(10233,1123,15324,-11352.060718035326883,7.5582990583477048515,-0.11311918072723555384),  TestValue(10233,10586,0.0004,-17.060718192656536162,-1.2600010324928188685e-9,2492.7518943576552348),  TestValue(10233,10586,0.065,-12.175300607237463447,-2.0474891832045490463e-7,13.125723676609068062),  TestValue(10233,10586,4.42,-9.4307920456266217014,-0.000013917201050134158853,0.11674937200192659959),  TestValue(10233,10586,800,-7.2703661972122617808,-0.0023429424616141566026,0.00008904830662418682316),  TestValue(10233,10586,15324,-9.3278240351663417157,-0.019721845219427536336,-0.00008059480750115928323),};
}  // namespace neg_binomial_2_test_internal

TEST(ProbDistributionsNegativeBinomial2, derivativesPrecomputed) {
  using neg_binomial_2_test_internal::TestValue;
  using neg_binomial_2_test_internal::testValues;
  using stan::test::internal::expect_near_rel_finite;
  using stan::math::is_nan;
  using stan::math::neg_binomial_2_log;
  using stan::math::value_of;
  using stan::math::var;

  for (TestValue t : testValues) {
    int n = t.n;
    var mu(t.mu);
    var phi(t.phi);
    var val = neg_binomial_2_log(n, mu, phi);

    std::vector<var> x;
    x.push_back(mu);
    x.push_back(phi);

    std::vector<double> gradients;
    val.grad(x, gradients);

    for (int i = 0; i < 2; ++i) {
      EXPECT_FALSE(is_nan(gradients[i]));
    }

    auto tolerance = [](double x) { return std::max(fabs(x * 1e-8), 1e-14); };

    EXPECT_NEAR(value_of(val), t.value, tolerance(t.value))
        << "value n = " << n << ", mu = " << t.mu << ", phi = " << t.phi;
    EXPECT_NEAR(gradients[0], t.grad_mu, tolerance(t.grad_mu))
        << "grad_mu n = " << n << ", mu = " << t.mu << ", phi = " << t.phi;
    EXPECT_NEAR(gradients[1], t.grad_phi, tolerance(t.grad_phi))
        << "grad_phi n = " << n << ", mu = " << t.mu << ", phi = " << t.phi;
  }
}

TEST(ProbDistributionsNegBinomial2, derivativesComplexStep) {
  using stan::test::internal::expect_near_rel_finite;
  using boost::math::differentiation::complex_step_derivative;
  using stan::math::is_nan;
  using stan::math::neg_binomial_2_log;
  using stan::math::var;

  std::vector<int> n_to_test = {0, 7, 100, 835, 14238, 385000, 1000000};
  std::vector<double> mu_to_test = {0.8, 8, 24, 271, 2586, 33294};

  auto nb2_log_for_test = [](int n, const std::complex<double>& mu,
                             const std::complex<double>& phi) {
    // Using first-order Taylor expansion of lgamma(a + b*i) around b = 0
    // Which happens to work nice in this case, as b is always 0 or the very
    // small complex step
    auto lgamma_c_approx = [](const std::complex<double>& x) {
      return std::complex<double>(lgamma(x.real()),
                                  x.imag() * boost::math::digamma(x.real()));
    };

    const double n_(n);
    return lgamma_c_approx(n_ + phi) - lgamma(n + 1) - lgamma_c_approx(phi)
           + phi * (log(phi) - log(mu + phi)) - n_ * log(mu + phi)
           + n_ * log(mu);
  };

  double phi_cutoff = stan::math::internal::neg_binomial_2_phi_cutoff;
  for (double mu_dbl : mu_to_test) {
    for (int n : n_to_test) {
      for (double phi_dbl = 1.5; phi_dbl < 1e22; phi_dbl *= 10) {
        var mu(mu_dbl);
        var phi(phi_dbl);
        var val = neg_binomial_2_lpmf(n, mu, phi);

        std::vector<var> x;
        x.push_back(mu);
        x.push_back(phi);

        std::vector<double> gradients;
        val.grad(x, gradients);

        EXPECT_TRUE(value_of(val) < 0)
            << "for n = " << n << ", mu = " << mu_dbl << ", phi = " << phi_dbl;

        for (int i = 0; i < 2; ++i) {
          EXPECT_FALSE(is_nan(gradients[i]));
        }

        auto nb2_log_mu
            = [n, phi_dbl, nb2_log_for_test](const std::complex<double>& mu) {
                return nb2_log_for_test(n, mu, phi_dbl);
              };
        auto nb2_log_phi
            = [n, mu_dbl, nb2_log_for_test](const std::complex<double>& phi) {
                return nb2_log_for_test(n, mu_dbl, phi);
              };
        double complex_step_dmu = complex_step_derivative(nb2_log_mu, mu_dbl);
        double complex_step_dphi
            = complex_step_derivative(nb2_log_phi, phi_dbl);

        std::ostringstream message;
        message << ", n = " << n << ", mu = " << mu_dbl
                << ", phi = " << phi_dbl;

        double tolerance_phi;
        double tolerance_mu;
        if (phi < phi_cutoff || n < 100000) {
          tolerance_phi = std::max(1e-10, fabs(gradients[1]) * 1e-8);
        } else {
          tolerance_phi = std::max(1e-8, fabs(gradients[1]) * 1e-5);
        }

        if (phi < phi_cutoff) {
          tolerance_mu = std::max(1e-10, fabs(gradients[0]) * 1e-8);
        } else {
          tolerance_mu = std::max(1e-8, fabs(gradients[0]) * 1e-5);
        }

        EXPECT_NEAR(gradients[0], complex_step_dmu, tolerance_mu)
            << "grad_mu" << message.str();

        EXPECT_NEAR(gradients[1], complex_step_dphi, tolerance_phi)
            << "grad_phi" << message.str();
      }
    }
  }
}

TEST(ProbDistributionsNegBinomial2, derivativesZeroOne) { 
  using stan::test::expect_near_rel;
  using stan::math::var;

  std::vector<double> mu_to_test
      = {2.345e-5, 0.2, 13, 150, 1621, 18432, 1e10 };
  double phi_start = 1e-8;
  double phi_max = 1e20;
  for (double mu_dbl : mu_to_test) {
    for(double phi_dbl = phi_start; phi_dbl < phi_max; 
        phi_dbl *= stan::math::pi()) {

      std::ostringstream msg;
      msg << ", mu = " << mu_dbl << ", phi = " << phi_dbl;

      var mu0(mu_dbl);
      var phi0(phi_dbl);
      var val0 = neg_binomial_2_lpmf(0, mu0, phi0);

      std::vector<var> x0;
      x0.push_back(mu0);
      x0.push_back(phi0);

      std::vector<double> gradients0;
      val0.grad(x0, gradients0);

      var mu1(mu_dbl);
      var phi1(phi_dbl);
      var val1 = neg_binomial_2_lpmf(1, mu1, phi1);

      std::vector<var> x1;
      x1.push_back(mu1);
      x1.push_back(phi1);

      std::vector<double> gradients1;
      val1.grad(x1, gradients1);

      double expected_dmu_0 = - phi_dbl / (mu_dbl + phi_dbl); 
      double expected_dphi_0 = mu_dbl / (mu_dbl + phi_dbl) 
        - log1p(mu_dbl / phi_dbl);
      expect_near_rel("dmu, n = 0 " + msg.str(), gradients0[0], expected_dmu_0);
      expect_near_rel("dphi, n = 0 " + msg.str(), gradients0[1], expected_dphi_0);

      double expected_dmu_1 = (phi_dbl * (1 - mu_dbl)) / (mu_dbl * (mu_dbl + phi_dbl));
      expect_near_rel("dmu, n = 1 " + msg.str(), gradients1[0], expected_dmu_1);
    }
  }

}

TEST(ProbDistributionsNegBinomial2, proptoAtPoissonCutoff) {
  using stan::math::internal::neg_binomial_2_phi_cutoff;
  using stan::math::neg_binomial_2_lpmf;
  using stan::math::var;

  var mu_var(10);
  int y = 11;
  var value_before_cutoff = neg_binomial_2_lpmf<true, int, var, double>(
      y, mu_var, neg_binomial_2_phi_cutoff - 1e-8);
  var value_after_cutoff = neg_binomial_2_lpmf<true, int, var, double>(
      y, mu_var, neg_binomial_2_phi_cutoff + 1e-8);

  EXPECT_NEAR(value_of(value_before_cutoff), value_of(value_after_cutoff), 1);
}

TEST(ProbDistributionsNegBinomial2, derivativesAtCutoff) {
  double phi_cutoff = stan::math::internal::neg_binomial_2_phi_cutoff;
  using stan::math::is_nan;
  using stan::math::var;

  std::vector<double> mu_to_test
      = {9.3e-6, 0.0028252, 4, 11, 8522, 984256, 5036842};
  std::vector<int> n_to_test = {0, 1, 5, 48, 1158, 224582, 48235842, 20314458};
  for (double mu : mu_to_test) {
    for (int n : n_to_test) {
      var mu_before(mu);
      var phi_before(phi_cutoff - 1e-8);
      var value_before = neg_binomial_2_lpmf(n, mu_before, phi_before);
      std::vector<var> x_before;
      x_before.push_back(mu_before);
      x_before.push_back(phi_before);

      std::vector<double> gradients_before;
      value_before.grad(x_before, gradients_before);

      var mu_after(mu);
      var phi_after(phi_cutoff + 1e-8);
      var value_after = neg_binomial_2_lpmf(n, mu_after, phi_after);
      std::vector<var> x_after;
      x_after.push_back(mu_after);
      x_after.push_back(phi_after);

      std::vector<double> gradients_after;
      value_after.grad(x_after, gradients_after);

      for (int i = 0; i < 2; ++i) {
        EXPECT_FALSE(is_nan(gradients_before[i]));
        EXPECT_FALSE(is_nan(gradients_after[i]));
      }

      EXPECT_NEAR(value_of(value_before), value_of(value_after),
                  1e-8 * fabs(value_of(value_after)))
          << "value changes too much around phi cutoff for n = " << n
          << ", mu = " << mu << ", cutoff = " << phi_cutoff
          << " value at cutoff - 1e-8: " << value_of(value_before)
          << ", value at cutoff + 1e-8: " << value_of(value_after);
      EXPECT_NEAR(gradients_before[0], gradients_after[0],
                  1e-8 * fabs(gradients_before[0]))
          << "grad_mu changes too much around phi cutoff for n = " << n
          << ", mu = " << mu << ", cutoff = " << phi_cutoff
          << " grad_mu at cutoff - 1e-8: " << gradients_before[0]
          << ", grad_mu at cutoff + 1e-8: " << gradients_after[0];

      EXPECT_NEAR(gradients_before[1], gradients_after[1],
                  1e-8 * fabs(gradients_before[1]))
          << "grad_phi changes too much around phi cutoff for n = " << n
          << ", mu = " << mu << ", cutoff = " << phi_cutoff
          << " grad_phi at cutoff - 1e-8: " << gradients_before[1]
          << ", grad_phi at cutoff + 1e-8: " << gradients_after[1];
    }
  }
}
