#include <stan/math/prim.hpp>
#include <test/unit/math/expect_near_rel.hpp>
#include <gtest/gtest.h>
#include <vector>
#include <string>
#include <cmath>

namespace binomial_coefficient_log_test_internal {
struct TestValue {
  double n;
  double k;
  double val;
  double dn;
  double dk;
};

constexpr double NaN = stan::math::NOT_A_NUMBER;
// Test values generated in Mathematica, reproducible notebook at
// https://www.wolframcloud.com/obj/martin.modrak/Published/binomial_coefficient_log.nb
// Mathematica Code reproduced below for convenience:

// bclog[n_,k_]:= LogGamma[n + 1] - LogGamma[k + 1] - LogGamma[n + 1 -k ]
// dbclogdn[n_,k_]= D[bclog[n,k],n];
// dbclogdk[n_,k_]= D[bclog[n,k],k];

// singleTest[x_,y_]:= Module[{val, cdn,cdk},{
// val = N[bclog[x,y],24];
// cdn = If[x > 10^6 || y > 10^6,"NaN", CForm[N[dbclogdn[x,y],24]]];
// cdk = If[x > 10^6 || y > 10^6,"NaN", CForm[N[dbclogdk[x,y],24]]];
// WriteString[out,"  {",CForm[x],",",CForm[y],",",
//            CForm[val],",",cdn,",",cdk,"},"]
// }];

// out = OpenWrite["bc_test.txt"];
// ns= {-0.1,3*10^-5,2*10^-3,1,8, 1325,845*10^3};
// ratios =  {-1,10^- 10,10^-5,10^-2,1/5,1/2,1-3*10^-2,1-6*10^-8, 1 -3*10^-9,2};
// WriteString[out, "std::vector<TestValue> testValues = {"];
// For[i = 1, i <= Length[ns], i++, {
//   For[j = 1, j <= Length[ratios], j++, {
//     cn = ns[[i]];
//     ck = If[ratios[[j]] < 0,-9/10,
//     If[ratios[[j]] > 1,cn + 9/10,cn * ratios[[j]] ]];
//     singleTest[cn,ck];
//   }]
// }]

// extremeNs = {3*10^15+1/2,10^20 + 1/2};
// lowKs = {3, 100, 12895};
// For[i = 1, i <= Length[extremeNs], i++, {
//   For[j = 1, j <= Length[lowKs], j++, {
//     cn = extremeNs[[i]];
//     ck = lowKs[[j]];
//     singleTest[cn,ck];
//   }]
// }]

// WriteString[out,"};"];
// Close[out];
// FilePrint[%]
std::vector<TestValue> testValues = {
    {-0.1, -0.9, -2.1152525390850903, -1.039918383240913, 10.708746373704937},
    {-0.1, -1.0000000000000001e-11, 1.7771062399418724e-12,
     -1.922551007282891e-11, -0.17771128500984368},
    {-0.1, -1.0000000000000002e-6, 1.7770950132278696e-7,
     -1.9225383585119715e-6, -0.1777077175718912},
    {-0.1, -0.001, 0.00017592768030333383, -0.0019209406823855746,
     -0.17414420715602041},
    {-0.1, -0.020000000000000004, 0.0028416866729211523, -0.037823152614322564,
     -0.10649980051731356},
    {-0.1, -0.05, 0.0044386492587971844, -0.09231733374172624, 0.},
    {-0.1, -0.097, 0.0005170837568402953, -0.17276563502587905,
     0.16701237954910164},
    {-0.1, -0.09999999400000001, 1.0662676433991578e-9, -0.17771127517591423,
     0.17771126364067447},
    {-0.1, -0.09999999970000001, 5.331331690149795e-11, -0.17771128455203855,
     0.17771128397527658},
    {-0.1, 0.8, -2.1152525390850907, 9.668827990464031, -10.708746373704944},
    {0.00003, -0.9, -2.21375637737528044964112, -0.933371118080918307851728,
     10.7799597405306456982503},
    {0.00003, 3.e-15, 1.48040820535563428588846e-19,
     4.9345858390686036409092e-15, 0.0000493469401735864488431421},
    {0.00003, 3.e-10, 1.48039340142161568666212e-14,
     4.93458584015035637326682e-10, 0.0000493459532446518755643083},
    {0.00003, 3.e-7, 1.46560412344434242311062e-11,
     4.93458692083243471796274e-7, 0.0000483600013795032175416619},
    {0.00003, 6.e-6, 2.36865312869367134774661e-10,
     9.86921494891292997054538e-6, 0.0000296081641072682815641386},
    {0.00003, 0.000015, 3.70102051348524044535716e-10,
     0.0000246731996398828628243033, 0},
    {0.00003, 0.0000291, 4.30798787797857754693695e-11,
     0.0000478665004969577356362445, -0.0000463861237716491741348152},
    {0.00003, 0.0000299999982, 8.88244870007509649977929e-17,
     0.0000493469372225745165598424, -0.0000493469342618230131147924},
    {0.00003, 0.00002999999991, 4.44122460318735146597007e-18,
     0.0000493469400354117708664247, -0.0000493469398873741956943572},
    {0.00003, 0.90003, -2.21375637737528044964112, 9.84658862244972739039859,
     -10.7799597405306456982503},
    {0.002, -0.9, -2.21559326412971099686943, -0.931489785799666354340725,
     10.7813141298573216195769},
    {0.002, 2.e-13, 6.57013709556564677684856e-16, 3.2802775880282756733109e-13,
     0.00328506854745431610233807},
    {0.002, 2.e-8, 6.57007139476544583161173e-11, 3.28027763585130905255152e-8,
     0.00328500284665411601964384},
    {0.002, 0.00002, 6.50443564072189575550994e-8,
     0.0000328032541239782363672409, 0.00321936709346449075328701},
    {0.002, 0.0004, 1.05122171458287350859763e-6, 0.000656246880415250668008776,
     0.00197104030081914294655284},
    {0.002, 0.001, 1.64253373496215313253469e-6, 0.00164133545687894154061287,
     0},
    {0.002, 0.00194, 1.91190982195918976356429e-7, 0.00318637683127152008217264,
     -0.00308796419928270612987841},
    {0.002, 0.00199999988, 3.94208202120835082737684e-13,
     0.00328506835071924267003294, -0.00328506815390258737114863},
    {0.002, 0.001999999994, 1.97104112295366725515452e-14,
     0.00328506853824172627346441, -0.00328506852840089350933798},
    {0.002, 0.902, -2.21559326412971099686943, 9.84982434405765526523621,
     -10.7813141298573216195769},
    {1, -0.9, -2.85558226198351740582195, -0.459715615539276790357555,
     11.3062548910488207249193},
    {1, 1.e-10, 9.9999999988550659331851e-11, 6.44934066868432126789198e-11,
     0.99999999977101318664035},
    {1, 0.00001, 9.99988550692664559909352e-6, 6.44936087425490392714312e-6,
     0.999977101418661870834803},
    {1, 0.01, 0.00988583703486131052627978, 0.00646962905305218281638255,
     0.977200163914089454058067},
    {1, 0.2, 0.156457962917688016707705, 0.137792901804605598784786,
     0.57403132988604983615591},
    {1, 0.5, 0.241564475270490444691037, 0.386294361119890618834464, 0},
    {1, 0.97, 0.028978328236256312960776, 0.951705422383897641079507,
     -0.932173296099201807475084},
    {1, 0.99999994, 5.99999958782374313463811e-8, 0.999999901303960316511031,
     -0.999999862607915578212576},
    {1, 0.999999997, 2.99999998969559340736596e-9, 0.999999995065197810273833,
     -0.999999993130395607910641},
    {1, 1.9, -2.85558226198351740582195, 10.8465392755095439345617,
     -11.3062548910488207249193},
    {8, -0.9, -4.22528965320883461943031, -0.100538838650771402252215,
     12.6649352570174581939568},
    {8, 8.e-10, 2.17428571372173153982474e-9, 9.4009611759639002250559e-11,
     2.71785714144718599267395},
    {8, 0.00008, 0.000217422931805073420417006, 9.4010053144199442029858e-6,
     2.71771615481909065227871},
    {8, 0.08, 0.211982267378255838975509, 0.00944537775278953163286055,
     2.58399543820453334937797},
    {8, 1.6, 2.90678606291134283426263, 0.208248082071609202561846,
     1.1813459431105245420685},
    {8, 4, 4.24849524204935898912334, 0.634523809523809523809524, 0},
    {8, 7.76, 0.606274586245453651115361, 2.38013515708154679097544,
     -2.35152741320850411987141},
    {8, 7.99999952, 1.30457122553768403613331e-6, 2.71785635328906772378496,
     -2.71785629688329908165944},
    {8, 7.999999976, 6.52285709209869625945566e-8, 2.71785710337872594517018,
     -2.71785710055843758854095},
    {8, 8.9, -4.22528965320883461943031, 12.5643964183666867917046,
     -12.6649352570174581939568},
    {1325, -0.9, -8.72360867216657209762532, -0.000678758619778166713080174,
     17.6139787484752694858826},
    {1325, 1.325e-7, 1.02909578020477960435539e-6,
     9.99622736492339027462876e-11, 7.76676049629224235717761},
    {1325, 0.01325, 0.102766042691370430370992, 9.99627732703511703537678e-6,
     7.74516389164454804001553},
    {1325, 13.25, 71.9898321274090629975055, 0.0100465251153381679080642,
     4.55823951796927536337622},
    {1325, 265, 659.435649329029419323398, 0.223049238391457549660772,
     1.38488037927413480754602},
    {1325, 662.5, 914.599450340845275100724, 0.692769964468769118810416, 0},
    {1325, 1285.25, 175.786260651191862665015, 3.49440932918478008636475,
     -3.46396178959974953213922},
    {1325, 1324.9999205, 0.000617452276410452190170437,
     7.76662994968438931022129, -7.76662988970702332503659},
    {1325, 1324.999996025, 0.0000308728608380968862741097,
     7.76675417575202484528552, -7.76675417275315663146178},
    {1325, 1325.9, -8.72360867216657209762532, 17.6132999898554913191696,
     -17.6139787484752694858826},
    {845000, -0.9, -14.5350963792733464918229, -1.06508755996070778708647e-6,
     24.0708485035538072767331},
    {845000, 0.0000845, 0.00120194816738712136581358,
     9.99999408334257028001921e-11, 14.2241691745103886002024},
    {845000, 8.45, 103.738303827736743600251, 0.0000100000440831167345507131,
     11.454909927882486225397},
    {845000, 8450, 47315.8616457576200611209, 0.0100503298765747570022521,
     4.59506127739683575088585},
    {845000, 169000, 422833.221695496506553128, 0.223143403385281321887929,
     1.3862921421877147496422},
    {845000, 422500, 585702.318235552114086514, 0.693146588844319105852931, 0},
    {845000, 819650, 113851.158132678562120685, 3.50653876529964054840506,
     -3.476079576115418785061},
    {845000, 844999.9493, 0.719108776819481762797449, 14.1438653554064391526676,
     -14.1438652954064728556142},
    {845000, 844999.997465, 0.036053342347290003917417,
     14.2201459621965153509889, -14.2201459591965171216362},
    {845000, 845000.9, -14.5350963792733464918229, 24.0708474384662473160253,
     -24.0708485035538072767331},
    {3.0000000000000005e15, 3, 105.120406581508329354183, NaN, NaN},
    {3.0000000000000005e15, 100, 3199.9994928023143716891, NaN, NaN},
    {3.0000000000000005e15, 12895, 350387.524360588370915867, NaN, NaN},
    {1.e20, 3, 136.363346110414686040252, NaN, NaN},
    {1.e20, 100, 4241.4308104325278778429, NaN, NaN},
    {1.e20, 12895, 484680.092769031900296942, NaN, NaN},
};

}  // namespace binomial_coefficient_log_test_internal

TEST(MathFunctions, binomial_coefficient_log_precomputed) {
  using binomial_coefficient_log_test_internal::TestValue;
  using binomial_coefficient_log_test_internal::testValues;
  using stan::math::is_nan;
  using stan::math::value_of;
  using stan::math::var;
  using stan::test::expect_near_rel;

  for (TestValue t : testValues) {
    std::stringstream msg;
    msg << std::setprecision(22) << "n = " << t.n << ", k = " << t.k;

    var n(t.n);
    var k(t.k);
    var val = stan::math::binomial_coefficient_log(n, k);

    std::vector<var> vars;
    vars.push_back(n);
    vars.push_back(k);

    std::vector<double> gradients;
    val.grad(vars, gradients);

    for (int i = 0; i < 2; ++i) {
      EXPECT_FALSE(is_nan(gradients[i]));
    }

    expect_near_rel(msg.str(), value_of(val), t.val);

    double tol_grad;
    if (n < 1 || k < 1) {
      tol_grad = 1e-7;
    } else {
      tol_grad = 1e-8;
    }
    if (!is_nan(t.dn)) {
      expect_near_rel(std::string("dn: ") + msg.str(), gradients[0], t.dn,
                      tol_grad);
    }
    if (!is_nan(t.dk)) {
      expect_near_rel(std::string("dk: ") + msg.str(), gradients[1], t.dk,
                      tol_grad);
    }
  }
}
