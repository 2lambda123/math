#include <stan/math/prim.hpp>
#include <test/unit/math/expect_near_rel.hpp>
#include <gtest/gtest.h>
#include <limits>
#include <vector>
#include <string>
#include <cmath>

namespace lbeta_test_internal {
struct TestValue {
  double x;
  double y;
  double val;
  double dx;
  double dy;
};

const double NaN = std::numeric_limits<double>::quiet_NaN();
// Test values generated in Mathematica, reproducible notebook at
// https://www.wolframcloud.com/obj/martin.modrak/Published/lbeta.nb
// Mathematica Code reproduced below for convenience:
//
// lbeta[x_,y_]:= LogGamma[x] + LogGamma[y] - LogGamma[x + y]
// dlbetadx[x_,y_]= D[lbeta[x,y],x];
// dlbetady[x_,y_]= D[lbeta[x,y],y];
// singleTest[x_,y_]:= Module[{val, cdx,cdy, big},{
// val = N[lbeta[x,y],24];
//
// cdx = If[x > 10^6 || y > 10^6,"NaN", CForm[N[dlbetadx[x,y],24]]];
// cdy = If[x > 10^6 || y > 10^6,"NaN", CForm[N[dlbetady[x,y],24]]];
// WriteString[out,"  {",myCForm[x],",",myCForm[y],",",
//            CForm[val],",",cdx,",",cdy,"},"]
// }];
// out = OpenWrite["lbeta_test.txt"]
// xs= {8*10^-8,4*10^-3,1,1+10^-8,5,23, 19845};
// ys =  {7*10^-11,2*10^-5,1+10^-12,1/2,2,1624};
//  WriteString[out, "std::vector<TestValue> testValues = {"];
//  For[i = 1, i <= Length[xs], i++, {
//        For[j = 1, j <= Length[ys], j++, {
//      singleTest[xs[[i]],ys[[j]] ];
// }]
// }]
// extremeXs = {3*10^15+10^-1,10^20 + 10^-1};
// lowYs = {3, 100, 12895};
//      For[i = 1, i <= Length[extremeXs], i++, {
//        For[j = 1, j <= Length[lowYs], j++, {
//      singleTest[extremeXs[[i]], lowYs[[j]] ];
//     val = N[lbeta[cx,cy],24];
//      }]
//   }]
//
// WriteString[out,"};"];
//  Close[out];
//  FilePrint[%]

std::vector<TestValue> testValues = {
    {8.e-8, 7.e-11, 23.3834004912898500586445, -10927.938054202687894216,
     -1.42732252136523400484532e10},
    {8.e-8, 0.00002, 16.3452312235394351410033, -1.24501992032201491926923e7,
     -199.203187382586887113175},
    {8.e-8, 1.000000000001, 16.3412392022725295437606,
     -1.25000000000000000016449e7, -1.31594717654502159762118e-7},
    {8.e-8, 0.5, 16.3412393131760679059067, -1.24999986137059020695139e7,
     -3.94784122191433395444674e-7},
    {8.e-8, 2, 16.3412391222725327438921, -1.25000009999999200000064e7,
     -5.15947240546939768458839e-8},
    {8.e-8, 1624, 16.3412385647081130254943, -1.25000079695551407072548e7,
     -4.92762534454617128243294e-11},
    {0.004, 7.e-11, 23.3825258913787298259023, -4.37511439928842416156948e-6,
     -1.42857140357208506616462e10},
    {0.004, 0.00002, 10.8247656947117878792194, -1.24381380143768415609934,
     -49751.2503414755983747443},
    {0.004, 1.000000000001, 5.52146091786223987264715,
     -250.000000000001635369299, -0.00656057236120388514782636},
    {0.004, 0.5, 5.52697992926150653113797, -248.626750675814276933855,
     -0.019605609295381002605048},
    {0.004, 2, 5.51746889659270898022044, -250.996015936254980079681,
     -0.00257650861619352959696878},
    {0.004, 1624, 5.48959582574332555214719, -257.96299716370111987649,
     -2.46380963715242856474168e-6},
    {1, 7.e-11, 23.3825258738791892190926, -1.15145384673485771727958e-10,
     -1.42857142857142857142857e10},
    {1, 0.00002, 10.8197782844102831106727, -0.0000328982005228616848562379,
     -50000.},
    {1, 1.000000000001, -9.999999999995e-13, -1.00000000000064493406685,
     -0.999999999999},
    {1, 0.5, 0.693147180559945309417232, -0.613705638880109381165536, -2.},
    {1, 2, -0.693147180559945309417232, -1.5, -0.5},
    {1, 1624, -7.39264752072162326054032, -7.97017103579949420353338,
     -0.000615763546798029556650246},
    {1.00000001, 7.e-11, 23.3825258738791892179411,
     -1.15145382990606130192415e-10, -1.42857142857142857307351e10},
    {1.00000001, 0.00002, 10.8197782844099541286699,
     -0.0000328982000420519176330864, -50000.0000000164488597385},
    {1.00000001, 1.000000000001, -1.00009999500064491739816e-8,
     -0.999999990000645034062806, -1.00000000644834064827253},
    {1.00000001, 0.5, 0.693147174422888956122731, -0.613705631778790796895922,
     -2.00000000934802196400696},
    {1.00000001, 2, -0.693147195559945246917232, -1.4999999875000001125,
     -0.500000003949340660776574},
    {1.00000001, 1624, -7.39264760042333353631934, -7.97017101935630939529017,
     -0.00061576355295376959001012},
    {5, 7.e-11, 23.3825258737333558857627, -1.5492606901478537931292e-11,
     -1.42857142877976190475194e10},
    {5, 0.00002, 10.8197366180283355258393, -4.42644935682442782816279e-6,
     -50002.0833048615821672961},
    {5, 1.000000000001, -1.60943791243638370793409, -0.200000000000181322955737,
     -2.28333333333186972222222},
    {5, 0.5, -0.207395194346070587158746, -0.104975480149950651006806,
     -3.5746031746031746031746},
    {5, 2, -3.40119738166215537541324, -0.366666666666666666666667, -1.45},
    {5, 1624, -33.7913357290267948074624, -5.88929697199582686904279,
     -0.00307503307646402839938757},
    {23, 7.e-11, 23.3825258736208322915813, -3.11059934755566881999954e-12,
     -1.4285714289405098964391e10},
    {23, 0.00002, 10.819704468465374949026, -8.88742275864946513838057e-7,
     -50003.6907812407590279883},
    {23, 1.000000000001, -3.13549421593288398231784,
     -0.0434782608696077641656727, -3.73429151108523781517567},
    {23, 0.5, -0.989947810259228199543883, -0.0219753695482036950492042,
     -5.09908298088536929896051},
    {23, 2, -6.31354804627709531045369, -0.085144927536231884057971,
     -2.77595817775350686913481},
    {23, 1624, -121.714785277510463870251, -4.29280953187037223167221,
     -0.0140675098349510427723158},
    {19845, 7.e-11, 23.3825258731460863706715, -3.5274257343438786558447e-15,
     -1.42857142961871835488144e10},
    {19845, 0.00002, 10.8195688267825637640878, -1.00783592359038619755746e-9,
     -50010.4728649374511207408},
    {19845, 1.000000000001, -9.89570736522763869861762,
     -0.0000503905265810531607359617, -10.4729482251687437980016},
    {19845, 0.5, -4.37548244086806082919414, -0.0000251955806911474238396687,
     -11.859217391344389445166},
    {19845, 2, -19.7914651196913525680177, -0.000100778514084781870541745,
     -9.47299861315789246077826},
    {19845, 1624, -5756.4146766727238501215, -0.078659853852481428671324,
     -2.58200241624359293360231},
    {3.e15, 3, -106.219018870176440645578, NaN, NaN},
    {3.e15, 100, -3204.6046629883057497238, NaN, NaN},
    {3.e15, 12895, -350396.988955562107351686, NaN, NaN},
    {1.e20, 3, -137.461958399082795731695, NaN, NaN},
    {1.e20, 100, -4246.03598061851596930954, NaN, NaN},
    {1.e20, 12895, -484689.557363950217404724, NaN, NaN},
};
}  // namespace lbeta_test_internal

TEST(MathFunctions, lbeta_precomputed) {
  using lbeta_test_internal::TestValue;
  using lbeta_test_internal::testValues;
  using stan::math::is_nan;
  using stan::math::value_of;
  using stan::math::var;
  using stan::test::expect_near_rel;

  for (TestValue t : testValues) {
    std::ostringstream msg;
    msg << std::setprecision(22) << "x = " << t.x << ", y = " << t.y;

    var x(t.x);
    var y(t.y);
    var val = stan::math::lbeta(x, y);

    std::vector<var> vars;
    vars.push_back(x);
    vars.push_back(y);

    std::vector<double> gradients;
    val.grad(vars, gradients);

    for (int i = 0; i < 2; ++i) {
      EXPECT_FALSE(is_nan(gradients[i]));
    }

    expect_near_rel(msg.str(), value_of(val), t.val);

    double tol_grad;
    if (x < 1e-4 || y < 1e-4) {
      tol_grad = 1e-7;
    } else {
      tol_grad = 1e-8;
    }
    if (!is_nan(t.dx)) {
      expect_near_rel(std::string("dx: ") + msg.str(), gradients[0], t.dx,
                      tol_grad);
    }
    if (!is_nan(t.dy)) {
      expect_near_rel(std::string("dy: ") + msg.str(), gradients[1], t.dy,
                      tol_grad);
    }
  }
}
